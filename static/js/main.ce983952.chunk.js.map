{"version":3,"sources":["classes/playerObject.js","classes/boardObject.js","helperFunctions/playerSetup.js","helperFunctions/shipSetup.js","classes/shipObject.js","helperFunctions/placeShipChecks.js","helperFunctions/computerSetup.js","actions/actionTypes.js","reducers/rootReducers.js","reducers/playerOneReducer.js","reducers/playerTwoReducer.js","reducers/gameStartReducer.js","reducers/placedShipsReducer.js","reducers/postAttackReducer.js","reducers/nextTurnReducer.js","actions/actions.js","views/PlaceShipGrid.js","views/PlaceShipBoard.js","views/ShipOptions.js","views/TogglePlacementButton.js","containers/PlaceShipViewContainer.js","views/PlaceShipView.js","containers/IntroPageContainer.js","views/IntroPage.js","containers/StartRoundButtonContainer.js","views/StartRoundButton.js","views/AttackBoardGrid.js","views/AttackBoard.js","views/OwnBoardGrid.js","views/OwnBoard.js","containers/AttackViewContainer.js","views/AttackView.js","views/GameOverHeader.js","containers/PostAttackContainer.js","views/PostAttackView.js","helperFunctions/computerAttack.js","views/rootView.js","App.js","configureStore.js","serviceWorker.js","index.js"],"names":["createPlayer","options","name","computer","board","attackOptions","targetHit","ships","shipsPlaced","loser","turn","createBoard","i","push","ship","hit","setupPlayers","num","concat","SHIP_OPTIONS","IMAGE_URLS","battleship","cruiser","carrier","destroyer","submarine","SHIPS","length","image","createShip","selectedShip","shiphits","sunk","checkLegalMove","vertical","spot","player","x","verticalCheck","upperbound","slice","every","grid","horizontalCheck","setupComputer","j","Math","random","shipOption","findGridForCompShipPlacement","placeShips","target","placeAllCompShips","computerAttackOptions","checkMove","arguments","undefined","floor","START_ONE_PLAYER","START_TWO_PLAYER","RECEIVE_ATTACK_ONE","RECEIVE_ATTACK_TWO","PLACE_SHIP_ONE","PLACE_SHIP_TWO","PLACED_SHIPS_COMPLETED","START_ATTACK_ONE","START_ATTACK_TWO","BEGIN_ATTACK","END_HOLD_SCREEN","UPDATE_ATTACK_OPTIONS","rootReducer","combineReducers","playerOne","changes","state","actions","type","shipPlace","copyShips","map","Object","assign","copyBoard","copyShip","find","findShip","alert","playerTwo","copyattackOptions","splice","copyAttackOptions","gameStart","placedShips","postAttack","nextTurn","receiveAttackOne","beginAttack","PlaceShipGrid","props","click","color","selectGridForShip","shipImage","react_default","a","createElement","src","alt","className","onClick","PlaceShipBoard","display","rowNum","row","_loop","gridNum","key","ShipOptionsDisplay","changeShip","reduce","acc","curr","toUpperCase","newship","TogglePlacement","buttonDescrption","isVertical","flipDirection","propTypes","PropTypes","object","func","PlaceShipViewContainer","connect","dispatch","completedPlacement","placeShipOne","placeShipTwo","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","selectedShipHeader","placementFunction","tryAndPlaceShip","IntroPageContainer","startOnePlayer","startTwoPlayer","StartRoundButtonContainer","AttackBoardGrid","receiveAttack","AttackBoard","gridValues","OwnBoardGrid","OwnBoard","id","AttackViewContainer","attackPlayerOne","attackPlayerTwo","receiveAttackTwo","header","attacker","defender","GameOverHeader","PostAttackContainer","startAttackOne","startAttackTwo","endHoldScreen","updateComputerAttackOptions","updateAttackOptions","targets","filter","includes","randomAdjacentValues","getComputerAttackLocation","winner","RootView","store","createStore","applyMiddleware","apply","App","es","rootView","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce983952.chunk.js","sourcesContent":["export function createPlayer(options) {\n  const { name, computer, board, attackOptions } = options;\n  if (computer) {\n    return {\n      attackOptions: attackOptions,\n      targetHit: null,\n      name: name,\n      ships: [],\n      board: board,\n      computer: computer,\n      shipsPlaced: true,\n      loser: false,\n    };\n  }\n  return {\n    name: name,\n    ships: [],\n    board: board,\n    computer: computer,\n    shipsPlaced: false,\n    turn: false,\n    loser: false,\n  };\n}\n","export function createBoard() {\n  let board = [];\n  for (let i = 0; i < 81; i++) {\n    let grid = { ship: null, hit: false };\n    board.push(grid);\n  }\n  return board;\n}\n","import { createPlayer } from '../classes/playerObject';\nimport { createBoard } from '../classes/boardObject';\n\nexport function setupPlayers(num) {\n  let name = `Player ${num}`;\n  let board = createBoard();\n  let player = createPlayer({ name: name, computer: false, board: board });\n\n  return player;\n}\n","import { shipObject } from '../classes/shipObject';\n\nexport const SHIP_OPTIONS = [\n  'battleship',\n  'cruiser',\n  'carrier',\n  'destroyer',\n  'submarine',\n];\nexport const IMAGE_URLS = {\n  battleship:\n    'https://i0.wp.com/bestofthesouthbay.com/wp-content/uploads/2018/05/Battleship-IOWA-3.jpg?fit=1000%2C565&ssl=1',\n  cruiser: 'http://www.military-today.com/navy/ticonderoga_class_cruiser.jpg',\n  carrier: 'https://s1.1zoom.me/big0/504/Ships_Aircraft_carrier_USS_Ronald_Reagan_(CVN_76)_520551_1280x854.jpg',\n  destroyer:\n    'https://assets.rebelmouse.io/eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpbWFnZSI6Imh0dHBzOi8vYXNzZXRzLnJibC5tcy8xNzQ5MjUzMC9vcmlnaW4uanBnIiwiZXhwaXJlc19hdCI6MTU4NTA5NTQ5N30.NtufxACnX8pnT1FS5S7hljDqfTTkgLF27X226CANZKE/img.jpg?width=980',\n  submarine: 'https://image.businessinsider.com/5ad514fd146e71a4488b47a3?width=1100&format=jpeg&auto=webp',\n};\n\nconst SHIPS = {\n  battleship: {\n    length: 4,\n    image: IMAGE_URLS.battleship,\n  },\n  submarine: {\n    length: 3,\n    image: IMAGE_URLS.submarine,\n  },\n  destroyer: {\n    length: 3,\n    image: IMAGE_URLS.destroyer,\n  },\n  cruiser: {\n    length: 2,\n    image: IMAGE_URLS.cruiser,\n  },\n  carrier: {\n    length: 5,\n    image: IMAGE_URLS.carrier,\n  },\n};\n\nexport function createShip(ship) {\n  let selectedShip = SHIPS[ship];\n  let newship = shipObject({\n    name: ship,\n    length: selectedShip.length,\n    image: selectedShip.image,\n  });\n  return newship;\n}\n","export function shipObject(options) {\n  const { name, length, image } = options;\n  return {\n    name: name,\n    length: length,\n    shiphits: 0,\n    sunk: false,\n    image: image,\n  };\n}\n","export function horizontalCheck(options) {\n  const { spot, ship, player } = options;\n  let upperbound;\n  for (let i = 1; i <= 9; i++) {\n    let num = i * 9 - 1;\n    //this finds which row the player is trying to place the ship and the most right coordinate grid number is the upperbound.\n    if (num >= spot) {\n      upperbound = num;\n      break;\n    }\n  }\n  if (spot + ship.length - 1 > upperbound) {\n    return false;\n  }\n\n  return player.board\n    .slice(spot, spot + ship.length)\n    .every(grid => grid.ship === null);\n}\n\nexport function verticalCheck(options) {\n  const { spot, ship, player } = options;\n\n  for (let i = 0; i < ship.length; i++) {\n    let x = i * 9;\n    if (spot + x > 80 || player.board[spot + x].ship !== null) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function checkLegalMove(options) {\n  return options.vertical ? verticalCheck(options) : horizontalCheck(options);\n}\n\nexport function tryAndPlaceShip(options) {\n  const {\n    changeShip,\n    placementFunction,\n    isVertical,\n    target,\n    selectedShip,\n    player,\n  } = options;\n  let legalPlacement = checkLegalMove({\n    vertical: isVertical,\n    spot: target,\n    ship: selectedShip,\n    player: player,\n  });\n\n  if (legalPlacement) {\n    let options = {\n      spot: target,\n      vertical: isVertical,\n      ship: selectedShip,\n    };\n    placementFunction(options);\n  } else {\n    alert('Error: You either have a piece there or it goes offboard');\n  }\n\n  changeShip(null);\n}\n","import { SHIP_OPTIONS, createShip } from './shipSetup';\nimport { createPlayer } from '../classes/playerObject';\nimport { createBoard } from '../classes/boardObject';\nimport { checkLegalMove } from './placeShipChecks';\n\nfunction setupComputer() {\n  let compboard = createBoard();\n  let computer = createPlayer({\n    name: 'computer',\n    computer: true,\n    board: compboard,\n    attackOptions: computerAttackOptions(),\n  });\n  let computerComplete = placeAllCompShips(computer);\n  return computerComplete;\n}\n\nexport function computerAttackOptions() {\n  let attackOptions = [];\n  for (let i = 0; i <= 80; i++) {\n    attackOptions.push(i);\n  }\n  return attackOptions;\n}\n\nexport function placeAllCompShips(computer) {\n  for (let j = 0; j < SHIP_OPTIONS.length; j++) {\n    let vertical = Math.random() > 0.5 ? true : false;\n    let shipOption = SHIP_OPTIONS[j];\n    let ship = createShip(shipOption);\n\n    let spot = findGridForCompShipPlacement({\n      vertical: vertical,\n      ship: ship,\n      computer: computer,\n    });\n\n    placeShips({\n      player: computer,\n      vertical: vertical,\n      ship: ship,\n      target: spot,\n    });\n  }\n  return computer;\n}\n\nexport function placeShips(options) {\n  const { player, target, ship, vertical } = options;\n  for (let i = 0; i < ship.length; i++) {\n    let x = i;\n    if (vertical === true) {\n      x = i * 9;\n    }\n    player.board[target + x].ship = ship;\n  }\n  player.ships.push(ship);\n\n  return player;\n}\n\nexport function findGridForCompShipPlacement(\n  options,\n  checkMove = checkLegalMove,\n) {\n  const { vertical, ship, computer } = options;\n  let spot = Math.floor(Math.random() * 80);\n  while (!checkMove({ spot: spot, vertical, ship, player: computer })) {\n    spot = Math.floor(Math.random() * 80);\n  }\n  return spot;\n}\n\nexport { setupComputer };\n","export const START_ONE_PLAYER = 'START_PLAYER_ONE';\nexport const START_TWO_PLAYER = 'START_TWO_PLAYER';\nexport const RECEIVE_ATTACK_ONE = 'RECEIVE_ATTACK_ONE';\nexport const RECEIVE_ATTACK_TWO = 'RECEIVE_ATTACK_TWO';\nexport const PLACE_SHIP_ONE = 'PLACE_SHIP_ONE';\nexport const PLACE_SHIP_TWO = 'PLACE_SHIP_TWO';\nexport const GAME_OVER = 'GAME_OVER';\nexport const PLACED_SHIPS_COMPLETED = 'PLACED_SHIPS_COMPLETED';\nexport const START_ATTACK_ONE = 'START_ATTACK_ONE';\nexport const START_ATTACK_TWO = 'START_ATTACK_TWO';\nexport const BEGIN_ATTACK = 'BEGIN_ATTACK';\nexport const END_HOLD_SCREEN = 'END_HOLD_SCREEN';\nexport const UPDATE_ATTACK_OPTIONS = 'UPDATE_ATTACK_OPTIONS';\n","import { playerTwoReducer } from './playerTwoReducer';\nimport { playerOneReducer } from './playerOneReducer';\nimport { gameStartReducer } from './gameStartReducer';\nimport { nextTurnReducer } from './nextTurnReducer';\nimport { combineReducers } from 'redux';\nimport { placedShipsReducer } from './placedShipsReducer';\nimport { postAttackReducer } from './postAttackReducer';\n\nexport const rootReducer = combineReducers({\n  playerOne: playerOneReducer,\n  playerTwo: playerTwoReducer,\n  gameStart: gameStartReducer,\n  placedShips: placedShipsReducer,\n  postAttack: postAttackReducer,\n  nextTurn: nextTurnReducer,\n});\n","import { setupPlayers } from '../helperFunctions/playerSetup';\nimport {\n  START_ATTACK_ONE,\n  RECEIVE_ATTACK_ONE,\n  PLACE_SHIP_ONE,\n  START_ATTACK_TWO,\n} from '../actions/actionTypes';\n\nexport function playerOneReducer(state = setupPlayers('1'), actions) {\n  const { type, shipPlace, target } = actions;\n  let copyShips = state.ships.map(ship => Object.assign({}, ship));\n  let copyBoard = state.board.map(grid => {\n    if (grid.ship !== null) {\n      let name = grid.ship.name;\n      let copyShip = copyShips.find(ship => ship.name === name);\n      return Object.assign({}, grid, { ship: copyShip });\n    } else {\n      return Object.assign({}, grid);\n    }\n  });\n  let changes;\n  switch (type) {\n    case RECEIVE_ATTACK_ONE:\n      changes = { loser: false, board: copyBoard, ships: copyShips };\n      copyBoard[target].hit = true;\n      let findShip = copyBoard[target].ship;\n      if (findShip !== null) {\n        findShip.shiphits++;\n        if (findShip.shiphits === findShip.length) {\n          findShip.sunk = true;\n          alert(`Player One's ${findShip.name} has sunk`);\n        }\n        if (copyShips.every(ship => ship.shiphits === ship.length)) {\n          changes['loser'] = true;\n        }\n      }\n      return Object.assign({}, state, changes);\n\n    case PLACE_SHIP_ONE:\n      const { ship, spot, vertical } = shipPlace;\n      changes = { ships: copyShips, board: copyBoard };\n      for (let i = 0; i < ship.length; i++) {\n        let x = i;\n        if (vertical === true) {\n          x = i * 9;\n        }\n        copyBoard[spot + x].ship = ship;\n      }\n      copyShips.push(ship);\n      if (copyShips.length === 5) {\n        changes['shipsPlaced'] = true;\n        changes['turn'] = true;\n      }\n      return Object.assign({}, state, changes);\n\n\n    case START_ATTACK_ONE:\n      changes = { turn: true };\n      return Object.assign({}, state, changes);\n\n    case START_ATTACK_TWO:\n      changes = { turn: false };\n      return Object.assign({}, state, changes);\n\n    default:\n      return state;\n  }\n}\n","import { setupPlayers } from '../helperFunctions/playerSetup';\nimport { setupComputer } from '../helperFunctions/computerSetup';\nimport {\n  START_ATTACK_TWO,\n  START_ONE_PLAYER,\n  RECEIVE_ATTACK_TWO,\n  PLACE_SHIP_TWO,\n  RECEIVE_ATTACK_ONE,\n  START_ATTACK_ONE,\n  UPDATE_ATTACK_OPTIONS,\n} from '../actions/actionTypes';\n\nexport function playerTwoReducer(state = setupPlayers('2'), actions) {\n  const { type, shipPlace, target } = actions;\n  let copyShips = state.ships.map(ship => Object.assign({}, ship));\n  let copyBoard = state.board.map(grid => {\n    if (grid.ship !== null) {\n      let name = grid.ship.name;\n      let copyShip = copyShips.find(ship => ship.name === name);\n      return Object.assign({}, grid, { ship: copyShip });\n    } else {\n      return Object.assign({}, grid);\n    }\n  });\n  let changes;\n  switch (type) {\n    case START_ONE_PLAYER:\n      return setupComputer();\n    case RECEIVE_ATTACK_ONE:\n      if (state.computer) {\n        const copyattackOptions = state.attackOptions.slice();\n        copyattackOptions.splice(target, 1);\n        changes = { targetHit: target, attackOptions: copyattackOptions };\n        //prevents compuer from attacking the same spot.\n      }\n      return Object.assign({}, state, changes);\n\n    case RECEIVE_ATTACK_TWO:\n      changes = { loser: false, board: copyBoard, ships: copyShips };\n      copyBoard[target].hit = true;\n      let findShip = copyBoard[target].ship;\n      if (findShip !== null) {\n        findShip.shiphits++;\n        if (findShip.shiphits === findShip.length) {\n          findShip.sunk = true;\n          alert(`Player Two's ${findShip.name} has sunk`);\n        }\n        if (copyShips.every(ship => ship.shiphits === ship.length)) {\n          changes['loser'] = true;\n        }\n      }\n      return Object.assign({}, state, changes);\n\n    case PLACE_SHIP_TWO:\n      const { ship, spot, vertical } = shipPlace;\n      changes = { ships: copyShips, board: copyBoard };\n      for (let i = 0; i < ship.length; i++) {\n        let x = i;\n        if (vertical === true) {\n          x = i * 9;\n        }\n        copyBoard[spot + x].ship = ship;\n      }\n      copyShips.push(ship);\n      if (copyShips.length === 5) {\n        changes['shipsPlaced'] = true;\n      }\n      return Object.assign({}, state, changes);\n\n    case START_ATTACK_ONE:\n      changes = { turn: false };\n      return Object.assign({}, state, changes);\n\n    case START_ATTACK_TWO:\n      changes = { turn: true };\n      return Object.assign({}, state, changes);\n\n    case UPDATE_ATTACK_OPTIONS:\n      let copyAttackOptions = state.attackOptions.slice();\n      copyAttackOptions.splice(target, 1);\n      changes = { attackOptions: copyAttackOptions };\n      return Object.assign({}, state, changes);\n    default:\n      return state;\n  }\n}\n","import { START_ONE_PLAYER, START_TWO_PLAYER } from '../actions/actionTypes';\n\nexport function gameStartReducer(state = false, actions) {\n  switch (actions.type) {\n    case START_ONE_PLAYER:\n    case START_TWO_PLAYER:\n      return true;\n    default:\n      return state;\n  }\n}\n","import { PLACED_SHIPS_COMPLETED } from '../actions/actionTypes';\n\nexport function placedShipsReducer(state = false, actions) {\n  switch (actions.type) {\n    case PLACED_SHIPS_COMPLETED:\n      return true;\n    default:\n      return state;\n  }\n}\n","import {\n  START_ATTACK_ONE,\n  START_ATTACK_TWO,\n  RECEIVE_ATTACK_TWO,\n  RECEIVE_ATTACK_ONE,\n} from '../actions/actionTypes';\n\nexport function postAttackReducer(state = false, actions) {\n  switch (actions.type) {\n    case RECEIVE_ATTACK_ONE:\n    case RECEIVE_ATTACK_TWO:\n      return true;\n    case START_ATTACK_ONE:\n    case START_ATTACK_TWO:\n      return false;\n    default:\n      return state;\n  }\n}\n","import {\n  END_HOLD_SCREEN,\n  BEGIN_ATTACK,\n  PLACED_SHIPS_COMPLETED,\n} from '../actions/actionTypes';\n\nexport function nextTurnReducer(state = false, actions) {\n  switch (actions.type) {\n    case BEGIN_ATTACK:\n      return false;\n    case END_HOLD_SCREEN:\n    case PLACED_SHIPS_COMPLETED:\n      return true;\n    default:\n      return state;\n  }\n}\n","import * as actions from './actionTypes';\n\nexport function startOnePlayer() {\n  return { type: actions.START_ONE_PLAYER };\n}\n\nexport function startTwoPlayer() {\n  return { type: actions.START_TWO_PLAYER };\n}\n\nexport function receiveAttackOne(target) {\n  return { type: actions.RECEIVE_ATTACK_ONE, target: target };\n}\n\nexport function receiveAttackTwo(target) {\n  return { type: actions.RECEIVE_ATTACK_TWO, target: target };\n}\n\nexport function placeShipOne(options) {\n  return { type: actions.PLACE_SHIP_ONE, shipPlace: options };\n}\n\nexport function placeShipTwo(options) {\n  return { type: actions.PLACE_SHIP_TWO, shipPlace: options };\n}\n\nexport function completeShipPlacement() {\n  return { type: actions.PLACED_SHIPS_COMPLETED };\n}\n\nexport function startAttackOne() {\n  return { type: actions.START_ATTACK_ONE };\n}\n\nexport function startAttackTwo() {\n  return { type: actions.START_ATTACK_TWO };\n}\n\nexport function beginAttack() {\n  return { type: actions.BEGIN_ATTACK };\n}\n\nexport function endHoldScreen() {\n  return { type: actions.END_HOLD_SCREEN };\n}\n\nexport function updateAttackOptions(target) {\n  return { type: actions.UPDATE_ATTACK_OPTIONS, target: target };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function PlaceShipGrid(props) {\n  const { selectGridForShip, grid } = props;\n\n  const { ship } = grid;\n  let click,\n    color,\n    shipImage = null;\n\n  if (ship === null) {\n    click = selectGridForShip;\n    color = 'blue';\n    shipImage = null;\n  } else {\n    const { name, image } = ship;\n    color = 'grey';\n    shipImage = <img src={image} alt={name} />;\n  }\n\n  return (\n    <section className={`grid ${color}`} onClick={click}>\n      {shipImage}\n    </section>\n  );\n}\n\nPlaceShipGrid.propTypes = {\n  selectGridForShip: PropTypes.func,\n  id: PropTypes.number,\n  grid: PropTypes.object,\n};\n","import React from 'react';\nimport { PlaceShipGrid } from './PlaceShipGrid';\nimport PropTypes from 'prop-types';\n\nexport function PlaceShipBoard(props) {\n  const { selectGridForShip, board } = props;\n  let display = [];\n  let rowNum = 0;\n  let row = [];\n  for (let i = 0; i < board.length; i++) {\n    const gridNum = i;\n    let grid = board[i];\n    row.push(\n      <PlaceShipGrid\n        key={`${gridNum} grid`}\n        grid={grid}\n        selectGridForShip={() => selectGridForShip(gridNum)}\n      />,\n    );\n    if (row.length === 9) {\n      display.push(<li key={rowNum}>{row}</li>);\n      rowNum += 1;\n      row = [];\n    }\n  }\n\n  return <ul>{display}</ul>;\n}\n\nPlaceShipBoard.propTypes = {\n  selectGridForShip: PropTypes.func,\n  board: PropTypes.array,\n};\n","import React from 'react';\nimport {\n  createShip,\n  IMAGE_URLS,\n  SHIP_OPTIONS,\n} from '../helperFunctions/shipSetup';\nimport PropTypes from 'prop-types';\n\nexport function ShipOptionsDisplay(props) {\n  const { player, changeShip } = props;\n  const ships = SHIP_OPTIONS.slice();\n  const shipImages = ships.reduce((acc, curr) => {\n    if (player.ships.find(x => x.name === curr) === undefined) {\n      acc.push(\n        <section className={'ship__view'}>\n          <p className={'ship__desc'}>{`${curr}`}</p>\n          <img\n            key={curr}\n            className={`ship__options ${curr.toUpperCase()}`}\n            src={IMAGE_URLS[curr]}\n            alt={curr}\n            onClick={() => {\n              const newship = createShip(curr);\n              changeShip(newship);\n            }}\n          />\n          ,\n        </section>,\n      );\n    }\n    return acc;\n  }, []);\n  return shipImages;\n}\n\nShipOptionsDisplay.propTypes = {\n  player: PropTypes.object,\n  changeShip: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function TogglePlacement(props) {\n  const { isVertical, flipDirection } = props;\n  let buttonDescrption;\n  if (isVertical === true) {\n    buttonDescrption = 'Horizontalize Placement';\n  } else {\n    buttonDescrption = 'Verticalize Placement';\n  }\n  return (\n    <button\n      className=\"vertical__button\"\n      onClick={() => flipDirection(!isVertical)}\n    >\n      {buttonDescrption}\n    </button>\n  );\n}\n\nTogglePlacement.propTypes = {\n  isVertical: PropTypes.bool,\n  flipDirection: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport {\n  completeShipPlacement,\n  placeShipOne,\n  placeShipTwo,\n} from '../actions/actions';\nimport { PlaceShipView } from '../views/PlaceShipView';\n\nfunction mapStateToProps(state) {\n  return {\n    playerOne: state.playerOne,\n    playerTwo: state.playerTwo,\n    placedShips: state.placedShips,\n    gameStart: state.gameStart,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    completedPlacement: () => dispatch(completeShipPlacement()),\n    placeShipOne: options => dispatch(placeShipOne(options)),\n    placeShipTwo: options => dispatch(placeShipTwo(options)),\n  };\n}\n\nexport const PlaceShipViewContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PlaceShipView);\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { tryAndPlaceShip } from '../helperFunctions/placeShipChecks';\nimport { PlaceShipBoard } from './PlaceShipBoard';\nimport { ShipOptionsDisplay } from './ShipOptions';\nimport { TogglePlacement } from './TogglePlacementButton';\n\nexport function PlaceShipView(props) {\n  const [isVertical, flipDirection] = useState(true);\n  const [selectedShip, changeShip] = useState(null);\n  const {\n    placedShips,\n    playerOne,\n    playerTwo,\n    gameStart,\n    placeShipOne,\n    placeShipTwo,\n    completedPlacement,\n  } = props;\n\n  if (placedShips || !gameStart) return null;\n  if (playerOne.shipsPlaced && playerTwo.shipsPlaced) {\n    completedPlacement();\n    return null;\n  }\n\n  let player = playerOne.shipsPlaced ? playerTwo : playerOne;\n\n  let click = () => null;\n  let selectedShipHeader = null;\n\n  if (selectedShip) {\n    const placementFunction =\n      player.name === 'Player 1' ? placeShipOne : placeShipTwo;\n\n    click = target =>\n      tryAndPlaceShip({\n        changeShip,\n        placementFunction,\n        isVertical,\n        target,\n        selectedShip,\n        player,\n      });\n    selectedShipHeader = `You have selected ${selectedShip.name}`;\n  }\n  return (\n    <section className=\"place-ships-board\">\n      <section className=\"place__ships__info\">\n        <h4>{player.name + ' Place Your Ships'}</h4>\n        <p>{selectedShipHeader}</p>\n      </section>\n      <section className=\"place__ship__board\">\n        <h3>Place Your Ships</h3>\n        <PlaceShipBoard board={player.board} selectGridForShip={click} />\n      </section>\n      <section className=\"place__ship__options\">\n        <ShipOptionsDisplay changeShip={changeShip} player={player} />\n        <TogglePlacement\n          isVertical={isVertical}\n          flipDirection={flipDirection}\n        />\n      </section>\n    </section>\n  );\n}\n\nPlaceShipView.propTypes = {\n  placedShips: PropTypes.bool,\n  playerOne: PropTypes.object,\n  playerTwo: PropTypes.object,\n  gameStart: PropTypes.bool,\n  placeShipOne: PropTypes.func,\n  placeShipTwo: PropTypes.func,\n  completedPlacement: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport { IntroPage } from '../views/IntroPage';\nimport { startOnePlayer, startTwoPlayer } from '../actions/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    gameStart: state.gameStart,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startOnePlayer: () => dispatch(startOnePlayer()),\n    startTwoPlayer: () => dispatch(startTwoPlayer()),\n  };\n}\n\nexport const IntroPageContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(IntroPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function IntroPage(props) {\n  const { startOnePlayer, startTwoPlayer, gameStart } = props;\n  if (gameStart) return null;\n  return (\n    <section className=\"start__game\">\n      <h4>Please Select:</h4>\n      <button className=\"start_button\" onClick={startOnePlayer}>\n        One Player\n      </button>\n      <button className=\"start_button\" onClick={startTwoPlayer}>\n        Two Player\n      </button>\n    </section>\n  );\n}\n\nIntroPage.propTypes = {\n  startOnePlayer: PropTypes.func,\n  startTwoPlayer: PropTypes.func,\n  gameStart: PropTypes.bool,\n};\n","import { StartRoundButton } from '../views/StartRoundButton';\nimport { connect } from 'react-redux';\nimport { beginAttack } from '../actions/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    playerOne: state.playerOne,\n    playerTwo: state.playerTwo,\n    nextTurn: state.nextTurn,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    beginAttack: () => dispatch(beginAttack()),\n  };\n}\n\nexport const StartRoundButtonContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(StartRoundButton);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function StartRoundButton(props) {\n  const { beginAttack, playerOne, playerTwo, nextTurn } = props;\n  if (!nextTurn) return null;\n  let name = playerOne.turn ? playerOne.name : playerTwo.name;\n  return (\n    <section className=\"change-players-cutscreen\">\n      <button\n        className=\"start-next-player-button\"\n        onClick={beginAttack}\n      >{`Click to Start ${name}'s Turn`}</button>\n    </section>\n  );\n}\n\nStartRoundButton.propTypes = {\n  beginAttack: PropTypes.func,\n  playerOne: PropTypes.object,\n  playerTwo: PropTypes.object,\n  nextTurn: PropTypes.object,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function AttackBoardGrid(props) {\n  const { grid, receiveAttack } = props;\n\n  const { ship, hit } = grid;\n  let click,\n    color = null;\n  if (hit === false) {\n    click = receiveAttack;\n    color = 'blue';\n  } else {\n    click = () => alert(\"You've already attacked this position\");\n    color = ship === null ? 'green' : 'red';\n  }\n\n  return <section className={`grid ${color}`} onClick={click}></section>;\n}\n\nAttackBoardGrid.propTypes = {\n  receiveAttack: PropTypes.func,\n  grid: PropTypes.object,\n};\n","import React from 'react';\nimport { AttackBoardGrid } from './AttackBoardGrid';\nimport PropTypes from 'prop-types';\n\nexport function AttackBoard(props) {\n  const { receiveAttack, board } = props;\n  let display = [];\n  let x = 0;\n  let row = [];\n  for (let i = 0; i < board.length; i++) {\n    const gridNum = i;\n    let gridValues = board[i];\n\n    row.push(\n      <AttackBoardGrid\n        key={`${gridNum} grid attack`}\n        grid={gridValues}\n        receiveAttack={() => receiveAttack(gridNum)}\n      />,\n    );\n    if (row.length === 9) {\n      display.push(<li key={x}>{row}</li>);\n      x += 1;\n      row = [];\n    }\n  }\n\n  return (\n    <section className=\"attack__screen\">\n      <h3>Attack Board</h3>\n      <section className=\"attack__board\">\n        <ul>{display}</ul>\n      </section>\n    </section>\n  );\n}\n\nAttackBoard.propTypes = {\n  receiveAttack: PropTypes.func,\n  board: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function OwnBoardGrid(props) {\n  const { grid } = props;\n\n  const { ship } = grid;\n  let color,\n    shipImage = null;\n\n  let click = () => alert(\"You can't attack yourself silly.\");\n  if (ship === null) {\n    color = grid.hit === true ? 'white' : 'blue';\n  } else {\n    if (grid.hit === true) {\n      color = 'red';\n    } else {\n      const { image, name } = ship;\n      color = 'grey';\n      shipImage = <img className=\"grid-ship-image\" src={image} alt={name} />;\n    }\n  }\n\n  return (\n    <section className={`grid ${color}`} onClick={click}>\n      {shipImage}\n    </section>\n  );\n}\n\nOwnBoardGrid.propTypes = {\n  grid: PropTypes.object,\n  id: PropTypes.string,\n};\n","import React from 'react';\nimport { OwnBoardGrid } from './OwnBoardGrid';\nimport PropTypes from 'prop-types';\n\nexport function OwnBoard(props) {\n  const { board } = props;\n  let display = [];\n  let rowNum = 0;\n  let row = [];\n\n  for (let i = 0; i < board.length; i++) {\n    const gridNum = i;\n    const grid = board[i];\n    row.push(\n      <OwnBoardGrid key={`ownBoard ${gridNum}`} id={'own-board'} grid={grid} />,\n    );\n\n    if (row.length === 9) {\n      display.push(<li key={rowNum}>{row}</li>);\n      rowNum += 1;\n      row = [];\n    }\n  }\n\n  return (\n    <section className=\"ownboard__screen\">\n      <h3 className=\"ownboard__head\">Your Board</h3>\n      <ul>{display}</ul>\n    </section>\n  );\n}\n\nOwnBoard.propTypes = {\n  board: PropTypes.array,\n};\n","import { connect } from 'react-redux';\nimport { receiveAttackOne, receiveAttackTwo } from '../actions/actions';\nimport { AttackView } from '../views/AttackView';\n\nfunction mapStateToProps(state) {\n  return {\n    gameStart: state.gameStart,\n    playerOne: state.playerOne,\n    playerTwo: state.playerTwo,\n    postAttack: state.postAttack,\n    nextTurn: state.nextTurn,\n    placedShips: state.placedShips,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    attackPlayerOne: target => dispatch(receiveAttackOne(target)),\n    attackPlayerTwo: target => dispatch(receiveAttackTwo(target)),\n  };\n}\n\nexport const AttackViewContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(AttackView);\n","import React from 'react';\nimport { AttackBoard } from './AttackBoard';\nimport { OwnBoard } from './OwnBoard';\n\nexport function AttackView(props) {\n  let display;\n  const {\n    gameStart,\n    placedShips,\n    playerOne,\n    playerTwo,\n    attackPlayerTwo,\n    attackPlayerOne,\n    nextTurn,\n    postAttack,\n  } = props;\n\n  if (!gameStart || !placedShips || nextTurn || postAttack) return null;\n\n  let header = `${playerTwo.name} Turn`;\n  let attacker = playerTwo;\n  let defender = playerOne;\n  let click = target => attackPlayerOne(target);\n\n  if (playerOne.turn) {\n    attacker = playerOne;\n    defender = playerTwo;\n    click = target => attackPlayerTwo(target);\n    header = `${playerOne.name} Turn`;\n  }\n\n  display = (\n    <div className=\"attack-board\">\n      <h2 className={'header-attack-view'}>{header}</h2>\n      <AttackBoard board={defender.board} receiveAttack={click} />\n      <OwnBoard board={attacker.board} />\n    </div>\n  );\n\n  return display;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function GameOverHeader(props) {\n  const { name } = props;\n  return (\n    <section className=\"game-over\">\n      {alert(`Game Over! ${name} Wins!`)}\n      <h1 className=\"game-over-banner\">{`Game Over! ${name} Wins!`}</h1>\n    </section>\n  );\n}\n\nGameOverHeader.propTypes = {\n  name: PropTypes.string,\n};\n","import { connect } from 'react-redux';\nimport {\n  receiveAttackOne,\n  beginAttack,\n  endHoldScreen,\n  startAttackTwo,\n  startAttackOne,\n  updateAttackOptions,\n} from '../actions/actions';\nimport { PostAttackView } from '../views/PostAttackView';\n\nfunction mapStateToProps(state) {\n  return {\n    playerOne: state.playerOne,\n    playerTwo: state.playerTwo,\n    postAttack: state.postAttack,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    startAttackOne: () => dispatch(startAttackOne()),\n    startAttackTwo: () => dispatch(startAttackTwo()),\n    endHoldScreen: () => dispatch(endHoldScreen()),\n    beginAttack: () => dispatch(beginAttack()),\n    attackPlayerOne: target => dispatch(receiveAttackOne(target)),\n    updateComputerAttackOptions: target =>\n      dispatch(updateAttackOptions(target)),\n  };\n}\n\nexport const PostAttackContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostAttackView);\n","import React from 'react';\nimport { AttackBoard } from './AttackBoard';\nimport { OwnBoard } from './OwnBoard';\nimport { getComputerAttackLocation } from '../helperFunctions/computerAttack';\nimport PropTypes from 'prop-types';\nimport { GameOverHeader } from './GameOverHeader';\n\nexport function PostAttackView(props) {\n  const {\n    postAttack,\n    playerOne,\n    playerTwo,\n    endHoldScreen,\n    attackPlayerOne,\n    updateComputerAttackOptions,\n    beginAttack,\n    startAttackOne,\n    startAttackTwo,\n  } = props;\n  if (!postAttack) return null;\n\n  let attacker = playerTwo;\n  let defender = playerOne;\n\n  if (playerOne.turn) {\n    attacker = playerOne;\n    defender = playerTwo;\n  }\n\n  let header = (\n    <h2 className=\"hold__screen__click\">\n      Click on any empty attack grid to end turn.\n    </h2>\n  );\n\n  let click = () => {\n    endHoldScreen();\n    if (defender.computer === true) {\n      let target = getComputerAttackLocation(playerTwo, playerOne);\n      attackPlayerOne(target);\n      updateComputerAttackOptions(target);\n      startAttackOne();\n      beginAttack();\n    } else {\n      playerOne.turn ? startAttackTwo() : startAttackOne();\n    }\n  };\n\n  if (attacker.loser || defender.loser) {\n    const loser = attacker.loser ? attacker.name : defender.name;\n    const winner = attacker.loser ? defender.name : attacker.name;\n    click = () => alert(`${loser} is a loooooooser`);\n    header = <GameOverHeader name={winner} />;\n  }\n\n  return (\n    <section className=\"post-attack-view\" onClick={click}>\n      {header}\n      <AttackBoard board={defender.board} receiveAttack={() => null} />\n\n      <OwnBoard board={attacker.board} />\n    </section>\n  );\n}\n\nPostAttackView.propTypes = {\n  postAttack: PropTypes.bool,\n  playerOne: PropTypes.object,\n  playerTwo: PropTypes.object,\n  endHoldScreen: PropTypes.func,\n  attackPlayerOne: PropTypes.func,\n  updateComputerAttackOptions: PropTypes.func,\n  startAttackOne: PropTypes.func,\n  startAttackTwo: PropTypes.func,\n  beginAttack: PropTypes.func,\n};\n","export function randomAdjacentValues(target, attackOptions) {\n  if (target === null) return [];\n  let adjacents = [target + 1, target - 1, target - 9, target + 9];\n  let targets = adjacents.filter(x => attackOptions.includes(x));\n  return targets;\n}\n\nexport function getComputerAttackLocation(computer, player) {\n  let { attackOptions, targetHit } = computer;\n  let { board } = player;\n  let target;\n  const targets = randomAdjacentValues(targetHit, attackOptions);\n  if (\n    board[targetHit] &&\n    board[targetHit].ship !== null &&\n    targets.length !== 0\n  ) {\n    target = targets[Math.floor(Math.random() * targets.length)];\n  } else {\n    let spot = Math.floor(Math.random() * attackOptions.length);\n    target = attackOptions[spot];\n  }\n  return target;\n}\n","import React from 'react';\nimport { PlaceShipViewContainer } from '../containers/PlaceShipViewContainer';\nimport { IntroPageContainer } from '../containers/IntroPageContainer';\nimport { StartRoundButtonContainer } from '../containers/StartRoundButtonContainer';\nimport { AttackViewContainer } from '../containers/AttackViewContainer';\nimport { PostAttackContainer } from '../containers/PostAttackContainer';\n\nexport function RootView() {\n  return (\n    <div className=\"game__container\">\n      <img\n        className=\"background-image\"\n        alt=\"a ship firing\"\n        src=\"https://nationalinterest.org/sites/default/files/styles/desktop__1260_/public/main_images/bang_2.jpg?itok=kzU9qcIq\"\n      ></img>\n      <section className=\"game__title\">\n        <header>\n          <h1 className=\"title\">BATTLETO-- SHIPS. BATTLE SHIPS</h1>\n        </header>\n      </section>\n      <section className=\"game__display\">\n        <IntroPageContainer />\n        <StartRoundButtonContainer />\n        <PlaceShipViewContainer />\n        <AttackViewContainer />\n        <PostAttackContainer />\n      </section>\n    </div>\n  );\n}\n\nexport default RootView;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './configureStore';\nimport RootView from './views/rootView';\nimport './App.scss';\n\nconst store = configureStore();\n\nexport function App() {\n  return (\n    <Provider store={store}>\n      <RootView />\n    </Provider>\n  );\n}\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport { rootReducer } from './reducers/rootReducers';\n\nexport function configureStore() {\n  const middlewares = [];\n\n  if (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n  }\n\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n/*\nPlayer holds the overall master grids array, will use this to determine if game over or not.\nPlayer uses master grids to produce board\n  Board uses that to produce singular grids\n  Grids will have receiveAttack function that sends back up to Player to determine if hit.\n  Board will show both current Player and opp board. Depending on which it will display which info for ships + hits etc.\n\n*/\n\nserviceWorker.unregister();\n"],"sourceRoot":""}